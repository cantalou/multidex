apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

if (project.gradle.startParameter.taskNames.contains("bintray")) {
    String oldVersion = getProperty("PROJ_VERSION")
    int index = oldVersion.lastIndexOf(".")
    def version
    if (index == -1) {
        version = Integer.toString(Integer.parseInt(oldVersion.substring(0)) + 1)
    } else {
        version = oldVersion.substring(0, index + 1) + Integer.toString(Integer.parseInt(oldVersion.substring(index + 1)) + 1)
    }
    println "update version from ${oldVersion} to ${version} "
    setProperty("PROJ_VERSION", version)
    setProperty("version", version)
    project.ext.set("PRE_PROJ_VERSION", oldVersion)
}

group = PROJ_GROUP
version = PROJ_VERSION

afterEvaluate {
    def task = tasks.findByName("bintrayUpload")
    if (task != null) {
        task.doLast {
            String oldVersion = getProperty("PRE_PROJ_VERSION")
            String version = getProperty("PROJ_VERSION")
            println "upload success write new version ${version} to file"
            def propertiesFile = file("${projectDir}/gradle.properties")
            def newContent = propertiesFile.getText("UTF-8").replace(oldVersion, version)
            propertiesFile.withWriter { out ->
                out << newContent
            }
        }
    }
}

task sourcesJar(type: Jar) {
    def srcDirs = []
    if (project.hasProperty("android")) {
        srcDirs << android.sourceSets.main.java.srcDirs
    } else {
        sourceSets.main.each {
            srcDirs << it.getAllJava().srcDirs
        }
    }
    from srcDirs
    classifier = 'sources'
}

task javadocTask(type: Javadoc) {

    sourceSets.main.each {
        source it.getAllJava().srcDirs
    }

    classpath += configurations.compile

    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title PROJ_ARTIFACTID
    }
}


// 配置maven库，生成POM.xml文件
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'jar'
                name ' '
                url ''
                licenses {
                    license {
                        name ''
                        url ''
                    }
                }
            }
        }
    }
}

bintray {
    user = BINTRAY_USER
    key = BINTRAY_KEY
    configurations = ['archives']
    publish = true //[Default: false] Whether version should be auto published after an upload
    pkg {
        repo = 'maven'
        userOrg = user
        name = PROJ_NAME
        desc = PROJ_DESCRIPTION
        websiteUrl = PROJ_WEBSITEURL
        issueTrackerUrl = PROJ_ISSUETRACKERURL
        vcsUrl = PROJ_VCSURL
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
    }
}
